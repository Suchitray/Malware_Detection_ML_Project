import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.dates import date2num
import datetime

# Title and Introduction
st.title("Malware Prediction Project")

st.header("Background and Introduction")
st.write("""
The traditional malware detection methods, such as signature-based and heuristic-based approaches heavily depend on expert knowledge which makes them time-consuming and less effective against evolving malware. 
AI techniques have addressed these limitations by enabling automatic feature extraction. Nataraj et al. [1] introduced malware detection by converting bytecode into grayscale images for classification with KNN. 
Recent models like CNNs and LSTMs further improved the accuracy, Le et al.’s [2] model achieved 98.2% on Microsoft's MMCC dataset. Chai et al.’s [3] proposed an LGMal framework which combines CNN and GCN and achieved an accuracy of 87.76%, while Xin et al. [4] focused on local code fragments, attaining 97.34% accuracy. 
In this project, we will use ML methods to build a robust malware prediction model using the Microsoft Malware Prediction dataset from Kaggle, which will focus on identifying infections based on Windows machine attributes.
""")

# Dataset Description
st.header("Dataset Description")
st.write("""
The Microsoft Malware Prediction dataset contains telemetry data from Windows machines, with 82 features like OS version, antivirus state, and hardware specs. Each row represents a machine, uniquely identified by "MachineIdentifier". "HasDetections" is the ground truth and indicates that Malware was detected on the machine.
""")
st.markdown("[Dataset Link](https://www.kaggle.com/c/microsoft-malware-prediction/data)")

# Problem Definition
st.header("Problem Definition")
st.write("""
The rise of malware greatly affects data security and system integrity, harming both people and enterprises. Existing cybersecurity methods fail to keep up with changing malware, resulting in inadequate protection. 
In this project we aim to construct a robust malware prediction model using machine learning methods to identify whether a Windows PC will be infected by malware depending on different attributes of that machine.
""")

# Motivation
st.header("Motivation")
st.write("""
Our motivation arises from the pressing necessity to improve security in an age of digital threats. By detecting malware attacks before they happen, we aim to help organizations and individuals implement preventive measures, protecting sensitive data and maintaining stability.
""")

# Contribution Table
st.header("Contribution Table")
data = {
    'Name': ['Suchitra, Rishitha', 'Rishitha', 'Chetan, Kartheek', 'Sanjay', 'All', 'Suchitra'],
    'Proposal Contributions': ['Introduction & Background', 'Problem Definition', 'Methods', 'Potential Results & Discussion', 'Video Recording', 'GitHub Page']
}
df = pd.DataFrame(data)
st.dataframe(df)

# Gantt Chart
st.header("Gantt Chart")

# # Task data for Gantt chart
# gantt_data = {
#     "Task": [
#         "Introduction & Background", "Problem Definition", "Methods", "Potential Results & Discussion",
#         "Video Recording", "GitHub Page", "Data Pre-Processing", "Model 1 - Random Forest", 
#         "Model Coding - Random Forest", "Results Evaluation - Random Forest", 
#         "Model 2 - Logistic Regression", "Model Coding - Logistic Regression", 
#         "Results Evaluation - Logistic Regression", "Model 3 - XGBoost", 
#         "Model Coding - XGBoost", "Results Evaluation - XGBoost", "Midterm Report", 
#         "Model 4 - LightGBM", "Model Coding - LightGBM", "Results Evaluation - LightGBM", 
#         "Model 5 - KMeans", "Model Coding - KMeans", "Results Evaluation - KMeans",
#         "Evaluation", "Model Comparison", "Presentation", "Recording", "Final Report"
#     ],
#     "Owner": [
#         "Suchitra, Rishitha", "Rishitha", "Chetan, Kartheek", "Sanjay", "All", "Suchitra", 
#         "Kartheek, Rishitha", "Chetan", "Chetan", "Chetan", "Karthik, Rishitha", 
#         "Karthik, Rishitha", "Karthik, Rishitha", "Sanjay, Suchitra", "Sanjay, Suchitra", 
#         "Sanjay, Suchitra", "All", "Kartheek, Sanjay", "Kartheek, Sanjay", 
#         "Kartheek, Sanjay", "Chetan, Suchitra, Rishitha", "Chetan, Suchitra, Rishitha", 
#         "Chetan, Suchitra, Rishitha", "All", "All", "All", "All", "All"
#     ],
#     "Start": [
#         "2024-09-23", "2024-09-23", "2024-09-25", "2024-09-27", "2024-09-30", "2024-09-30",
#         "2024-10-05", "2024-10-13", "2024-10-13", "2024-10-26", "2024-10-16", "2024-10-16", 
#         "2024-10-28", "2024-10-13", "2024-10-13", "2024-10-26", "2024-11-09", "2024-11-09", 
#         "2024-11-22", "2024-11-22", "2024-11-22", "2024-11-22", "2024-11-25", 
#         "2024-11-25", "2024-11-30", "2024-12-01", "2024-11-27"
#     ],
#     "Finish": [
#         "2024-10-01", "2024-10-01", "2024-10-04", "2024-10-04", "2024-10-04", "2024-10-04",
#         "2024-10-10", "2024-10-25", "2024-10-25", "2024-11-04", "2024-10-27", "2024-10-27", 
#         "2024-11-04", "2024-10-25", "2024-10-25", "2024-11-04", 
#         "2024-11-08", "2024-11-22", "2024-11-25", "2024-11-25", 
#         "2024-11-25", "2024-11-25", "2024-11-30", "2024-11-30", 
#         "2024-12-02", "2024-12-03", "2024-12-03"
#     ]
# }

# # Convert the data into a DataFrame
# gantt_df = pd.DataFrame(gantt_data)

# # Convert the 'Start' and 'Finish' columns to datetime
# gantt_df["Start"] = pd.to_datetime(gantt_df["Start"])
# gantt_df["Finish"] = pd.to_datetime(gantt_df["Finish"])

# # Create Gantt chart using matplotlib
# fig, ax = plt.subplots(figsize=(10, 8))

# # For each task, draw a line between the start and finish date
# for i, task in gantt_df.iterrows():
#     start = date2num(task['Start'])
#     end = date2num(task['Finish'])
#     ax.barh(task['Task'], end - start, left=start, color='skyblue', edgecolor='black')

# # Customize the chart
# ax.set_xlabel('Date')
# ax.set_ylabel('Task')
# ax.set_title('Gantt Chart')
# ax.grid(True)

# # Show the Gantt chart in Streamlit
# st.pyplot(fig)
